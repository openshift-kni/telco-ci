---
- name: Create namespace
  kubernetes.core.k8s:
    api_version: v1
    kubeconfig: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
    kind: Namespace
    name: sample-dev-ns
    state: present
    definition:
      metadata:
        name: sample-dev-ns
        labels:
          pod-security.kubernetes.io/audit: privileged
          pod-security.kubernetes.io/enforce: privileged
          pod-security.kubernetes.io/warn: privileged
          security.openshift.io/scc.podSecurityLabelSync: "false"

- name: Add scc permission to the new ns
  environment:
    KUBECONFIG: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
  ansible.builtin.command: >
    oc adm policy add-scc-to-user privileged -z default -n sample-dev-ns
  register: add_scc
  changed_when: add_scc.rc != 0

- name: Create service Account
  kubernetes.core.k8s:
    api_version: v1
    kubeconfig: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
    kind: ServiceAccount
    name: sampledevices-sa
    state: present
    namespace: sample-dev-ns
    definition:
      metadata:
        name: sampledevices-sa

- name: Create role for sample devices
  kubernetes.core.k8s:
    api_version: rbac.authorization.k8s.io/v1
    kubeconfig: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
    kind: Role
    name: sampledevices-ro
    state: present
    namespace: sample-dev-ns
    definition:
      metadata:
        name: sampledevices-ro
        namespace: sample-dev-ns
      rules:
        - apiGroups:
            - security.openshift.io
          resourceNames:
            - privileged
          resources:
            - securitycontextconstraints
          verbs:
            - use

- name: Create role binding for sample devices
  kubernetes.core.k8s:
    api_version: rbac.authorization.k8s.io/v1
    kubeconfig: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
    kind: Role
    name: sampledevices-rb
    state: present
    namespace: sample-dev-ns
    definition:
      metadata:
        name: sampledevices-rb
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: Role
        name: sampledevices-ro
      subjects:
        - kind: ServiceAccount
          name: sampledevices-sa
          namespace: sample-dev-ns

- name: Create temporary directory
  ansible.builtin.tempfile:
    state: directory
    suffix: sampleDevices
  register: tmp_dir_result

- name: Create configmaps
  block:
    - name: Generate configmaps manifests
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ tmp_dir_result.path }}/{{ item.rsplit('.', 1)[0] }}"
        mode: "0644"
      loop:
        - device-A-configmap.yaml.j2
        - device-B-configmap.yaml.j2
        - device-C-configmap.yaml.j2

    - name: Apply all config maps
      environment:
        KUBECONFIG: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
      ansible.builtin.shell:
        oc apply -f {{ tmp_dir_result.path }}/{{ item }}
      loop:
        - device-A-configmap.yaml
        - device-B-configmap.yaml
        - device-C-configmap.yaml
      register: configmaps
      changed_when: configmaps.rc != 0

- name: Create daemonsets
  block:
    - name: Generate daemonset manifests
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "{{ tmp_dir_result.path }}/{{ item.rsplit('.', 1)[0] }}"
        mode: "0644"
      loop:
        - device-A-daemonset.yaml.j2
        - device-B-daemonset.yaml.j2
        - device-C-daemonset.yaml.j2

    - name: Apply all daemonsets
      environment:
        KUBECONFIG: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
      ansible.builtin.shell:
        oc apply -f {{ tmp_dir_result.path }}/{{ item }}
      loop:
        - device-A-daemonset.yaml
        - device-B-daemonset.yaml
        - device-C-daemonset.yaml

- name: Add scc permission to the new ns
  environment:
    KUBECONFIG: "{{ sampleDevices_hosted_kubeconfig | default(omit) }}"
  ansible.builtin.command: >
    oc adm policy add-scc-to-user privileged -z sampledevices-sa -n sample-dev-ns
  register: add_scc
  changed_when: add_scc.rc != 0

- name: Remove temporary directory
  ansible.builtin.file:
    path: "{{ tmp_dir_result.path }}"
    state: absent
